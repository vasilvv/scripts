#!/usr/bin/python

import debian.changelog
import os
import sys
import shutil
import subprocess

def die(message):
    sys.stderr.write("%s\n" % message)
    sys.exit(1)

def git(*args, **kwargs):
    global repo_path

    cmd = ['git'] + list(args)
    return subprocess.check_output(cmd, stderr = subprocess.STDOUT, cwd = repo_path, **kwargs)

# Parse command-line arguments
if len(sys.argv) < 2:
    die("Usage: dasource repo")

repo_name = sys.argv[1]
repo_path = "%s/%s" % (os.environ['DEBATHENA_CHECKOUT_HOME'], repo_name)
if not os.path.isdir(repo_path):
    die("%s is supposed to be the repository checkout, bit it is not a directory" % repo_path)

# Clean up
git('clean', '-dfx')
git('reset', '--hard', 'HEAD')

# Locate master and debian branches
rev_master = git('rev-parse', 'refs/heads/master')
try:
    rev_debian = git('rev-parse', 'refs/heads/debian')
except subprocess.CalledProcessError:
    try:
        rev_debian = git('rev-parse', 'origin/debian')
    except subprocess.CalledProcessError:
        rev_debian = None

# Switch to debian branch, if present
if rev_debian:
    git('checkout', 'debian')

if not os.path.isfile(repo_path + "/debian/source/format"):
    die("The repository does not contain source format")

# Validate source format
with open(repo_path + "/debian/source/format") as f:
    source_format = f.read().strip()
    if rev_debian and source_format != "3.0 (quilt)":
        die("The repository has debian branch, but format is not 3.0 (quilt).")
    if not rev_debian and source_format != "3.0 (native)":
        die("The repository does not have debian branch, but format is not 3.0 (native).")

# Check gbp.conf
if not os.path.isfile(repo_path + "/debian/gbp.conf"):
    die("The repository does not contain gbp.conf")

# Load the changelog for package information
with open(repo_path + '/debian/changelog') as f:
    changelog_src = f.read()
    cl = debian.changelog.Changelog(changelog_src)

# List names of all the source package files
if source_format == "3.0 (quilt)":
    source_package_files = [ '%s_%s%s' % (cl.package, cl.version, ext) for ext in
            ('.dsc', '.debian.tar.gz', '_source.build', '_source.changes') ]
    source_package_files += ['%s_%s.orig.tar.gz' % (cl.package, cl.upstream_version)]
if source_format == "3.0 (native)":
    source_package_files = [ '%s_%s%s' % (cl.package, cl.version, ext) for ext in
            ('.dsc', '_source.build', '_source.changes', '.tar.gz') ]

# Check if there is already a source package at temporary location
repo_build_dest = os.path.dirname(repo_path)
source_packages_repo_base = [ "%s/%s" % (repo_build_dest, pkg) for pkg in source_package_files ]
if any(os.path.exists(pkg_file) for pkg_file in source_packages_repo_base):
    die("""There are source package files already present in the checkout directory.
They should not be there, because they are moved by dasource after build.
Please find out why they are there and remove them.""")


# Build the source package
try:
    git('buildpackage', '-S', '-us', '-uc')
except subprocess.CalledProcessError as err:
    die(err.output)

# Move the source package to the destination
for file_name in source_package_files:
    shutil.move(repo_build_dest + "/" + file_name, os.environ['DEBATHENA_SOURCE_ROOT'])
